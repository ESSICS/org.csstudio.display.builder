<?xml version="1.0" encoding="UTF-8"?>
<display version="1.0.0">
  <name>Display</name>
  <x>-1</x>
  <y>-1</y>
  <widget type="label" version="2.0.0">
    <name>Label</name>
    <text>Scripts</text>
    <font>
      <font name="Header 1" family="Liberation Sans" style="BOLD" size="22.0">
      </font>
    </font>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_1</name>
    <y>41</y>
    <width>381</width>
    <height>50</height>
    <text>Scripts allow modifications of the display at runtime
that go beyond the usual PV-based update of a widget.</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_2</name>
    <y>91</y>
    <width>301</width>
    <height>30</height>
    <text>The use of scripts should be limited!</text>
    <font>
      <font name="Default Bold" family="Liberation Sans" style="BOLD" size="14.0">
      </font>
    </font>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_3</name>
    <y>331</y>
    <width>381</width>
    <height>80</height>
    <text>Bad examples of using a script:
- Turn control system display into video game.
- Perform automation of the control system in the display.
- Handle interlocks for the control system in the display.</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_4</name>
    <y>121</y>
    <width>521</width>
    <height>80</height>
    <text>Scripts should only be employed to solve very few and specific cases.

The script API cannot be guaranteed to remain available as the display builder
evolves. Scripts may need to be updated as the API changes.
</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_5</name>
    <y>201</y>
    <width>381</width>
    <height>140</height>
    <text>Acceptable examples of using a script:
- Improve the visualization of the control system state
  in a few, carefully selected cases.
- Integrate external functionality, for example perform
  a web service lookup, for a specific need that is not
  generic enough to create a new widget or
  PV data source.</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="textupdate" version="2.0.0">
    <name>Text Update</name>
    <x>11</x>
    <y>481</y>
    <width>70</width>
    <pv_name>sim://ramp(-5,5,0.1)</pv_name>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_7</name>
    <x>141</x>
    <y>481</y>
    <foreground_color>
      <color name="Attention" red="255" green="160" blue="0">
      </color>
    </foreground_color>
    <font>
      <font name="Default Bold" family="Liberation Sans" style="BOLD" size="14.0">
      </font>
    </font>
    <scripts>
      <script file="scripts/update_text.py">
        <pv_name>sim://ramp(-5,5,0.1)</pv_name>
      </script>
    </scripts>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_6</name>
    <y>451</y>
    <width>180</width>
    <height>30</height>
    <text>Update Label Text</text>
    <font>
      <font name="Header 2" family="Liberation Sans" style="BOLD" size="18.0">
      </font>
    </font>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_8</name>
    <y>511</y>
    <width>381</width>
    <height>50</height>
    <text>Script attached to label, triggered by the PV,
updates the label's text to indicate positive or negative value.</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_9</name>
    <y>561</y>
    <width>391</width>
    <height>70</height>
    <text>Such a check could be performed on the IOC, updating
an enum PV with the "Positive", "Negative" text,
then using a plain Text Update widget to show the result...</text>
    <font>
      <font name="Comment" family="Liberation Sans" style="ITALIC" size="14.0">
      </font>
    </font>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="textupdate" version="2.0.0">
    <name>Text Update_1</name>
    <x>11</x>
    <y>671</y>
    <width>70</width>
    <pv_name>sim://ramp(-5,5,0.1)</pv_name>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_11</name>
    <y>641</y>
    <width>281</width>
    <height>30</height>
    <text>Update Label Position</text>
    <font>
      <font name="Header 2" family="Liberation Sans" style="BOLD" size="18.0">
      </font>
    </font>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_12</name>
    <y>701</y>
    <width>381</width>
    <height>70</height>
    <text>Script attached to label, triggered by the PV,
updates the label's position based on that PV
and some other local PVs which are used to pass in 
constant configuration parameters.</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_13</name>
    <y>781</y>
    <width>391</width>
    <height>50</height>
    <text>Not clear why one would want to do this.
Clearly a counterexample for the use of scripts.</text>
    <font>
      <font name="Comment" family="Liberation Sans" style="ITALIC" size="14.0">
      </font>
    </font>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_10</name>
    <x>141</x>
    <y>671</y>
    <width>90</width>
    <text>I'm moving!</text>
    <foreground_color>
      <color name="STOP" red="255" green="0" blue="0">
      </color>
    </foreground_color>
    <background_color>
      <color name="Attention" red="255" green="160" blue="0">
      </color>
    </background_color>
    <transparent>false</transparent>
    <font>
      <font name="Default Bold" family="Liberation Sans" style="BOLD" size="14.0">
      </font>
    </font>
    <scripts>
      <script file="scripts/update_x.py">
        <pv_name>sim://ramp(-5,5,0.1)</pv_name>
        <pv_name trigger="false">loc://pos(160)</pv_name>
        <pv_name trigger="false">loc://scale(10)</pv_name>
      </script>
    </scripts>
  </widget>
  <widget type="textentry" version="3.0.0">
    <name>Text Entry</name>
    <x>541</x>
    <y>481</y>
    <width>210</width>
    <pv_name>loc://pv_name("sim://sine")</pv_name>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_14</name>
    <x>411</x>
    <y>451</y>
    <width>180</width>
    <height>30</height>
    <text>Update PV Name</text>
    <font>
      <font name="Header 2" family="Liberation Sans" style="BOLD" size="18.0">
      </font>
    </font>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_15</name>
    <x>411</x>
    <y>481</y>
    <width>120</width>
    <text>Enter PV Name:</text>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_16</name>
    <x>411</x>
    <y>511</y>
    <width>330</width>
    <height>30</height>
    <text>Script will update the PV name of the Text Update:</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="textupdate" version="2.0.0">
    <name>Text Update_2</name>
    <x>541</x>
    <y>541</y>
    <width>210</width>
    <height>26</height>
    <scripts>
      <script file="scripts/update_pv_name.py">
        <pv_name>loc://pv_name("sim://sine")</pv_name>
      </script>
    </scripts>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_17</name>
    <x>411</x>
    <y>541</y>
    <width>120</width>
    <text>Value of PV:</text>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_18</name>
    <x>411</x>
    <y>581</y>
    <width>470</width>
    <height>90</height>
    <text>This could be useful to update the PVs of a display.
On the other hand, the display structure may be easier to understand
and long term maintenance is simplified when using buttons that open
new displays, passing macros for the PV names...</text>
    <font>
      <font name="Comment" family="Liberation Sans" style="ITALIC" size="14.0">
      </font>
    </font>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_19</name>
    <x>201</x>
    <y>831</y>
    <width>90</width>
    <text>&lt;- Active</text>
    <foreground_color>
      <color name="Attention" red="255" green="160" blue="0">
      </color>
    </foreground_color>
    <font>
      <font name="Default Bold" family="Liberation Sans" style="BOLD" size="14.0">
      </font>
    </font>
    <scripts>
      <script file="scripts/update_x.py">
        <pv_name>loc://mode(0)</pv_name>
        <pv_name trigger="false">loc://pos(200)</pv_name>
        <pv_name trigger="false">loc://scale(150)</pv_name>
      </script>
    </scripts>
  </widget>
  <widget type="textentry" version="3.0.0">
    <name>Text Entry_1</name>
    <x>11</x>
    <y>831</y>
    <pv_name>loc://mode(0)</pv_name>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_20</name>
    <x>151</x>
    <y>831</y>
    <width>60</width>
    <text>Mode 1</text>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_21</name>
    <x>301</x>
    <y>831</y>
    <width>60</width>
    <text>Mode 2</text>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_22</name>
    <x>451</x>
    <y>831</y>
    <width>60</width>
    <text>Mode 3</text>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_23</name>
    <y>901</y>
    <width>391</width>
    <height>50</height>
    <text>Is this good or gimmickry?
LEDs next to each mode that are 'on' for the active mode
would avoid scripts and maybe overall be better.</text>
    <font>
      <font name="Comment" family="Liberation Sans" style="ITALIC" size="14.0">
      </font>
    </font>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_24</name>
    <y>861</y>
    <width>361</width>
    <height>40</height>
    <text>Similar: Enter mode values 0, 1, 2,
and the "Active" label moves next to the selected mode.</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
  <widget type="action_button" version="2.0.0">
    <name>Action Button</name>
    <x>411</x>
    <y>791</y>
    <width>110</width>
    <height>30</height>
    <text>$(actions)</text>
    <actions>
      <action type="open_display">
        <file>solitaire/solitaire.opi</file>
        <target>replace</target>
        <description>Solitaire</description>
      </action>
    </actions>
  </widget>
  <widget type="action_button" version="2.0.0">
    <name>Action Button_1</name>
    <x>551</x>
    <y>791</y>
    <width>110</width>
    <height>30</height>
    <text>$(actions)</text>
    <actions>
      <action type="open_display">
        <file>t3/t3.opi</file>
        <target>replace</target>
        <description>TTT</description>
      </action>
    </actions>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_25</name>
    <x>411</x>
    <y>671</y>
    <width>270</width>
    <height>30</height>
    <text>Longer Examples</text>
    <font>
      <font name="Header 2" family="Liberation Sans" style="BOLD" size="18.0">
      </font>
    </font>
  </widget>
  <widget type="label" version="2.0.0">
    <name>Label_26</name>
    <x>411</x>
    <y>701</y>
    <width>430</width>
    <height>83</height>
    <text>These examples include scripts that remains active
as long as the display is open, continuously updating
the widgets in the display,
or use a script that performs a comparably lengthy computation
before updating the display.</text>
    <vertical_alignment>0</vertical_alignment>
  </widget>
</display>
